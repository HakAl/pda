[pytest]
# Pytest configuration for PDA project

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Directories to search for tests
testpaths = tests

# Minimum Python version
minversion = 3.8

# Command line options to always use
addopts =
    # Show summary of all test outcomes
    -ra
    # Show local variables in tracebacks
    --showlocals
    # Strict markers - fail on unknown markers
    --strict-markers
    # Strict config - fail on unknown config options
    --strict-config
    # Verbose output for failures
    --tb=short
    # Show warnings
    -W default
    # Coverage options (uncomment when running with coverage)
    # --cov=pda
    # --cov-report=term-missing
    # --cov-report=html
    # --cov-fail-under=80

# Markers for categorizing tests
markers =
    unit: Unit tests - fast, isolated tests of individual functions/methods
    integration: Integration tests - tests involving multiple components
    slow: Tests that take significant time to run (> 1 second)
    requires_nltk: Tests that require NLTK data to be downloaded
    requires_api: Tests that require API keys (Ollama, Google, etc.)
    requires_network: Tests that require network connectivity
    performance: Performance and benchmarking tests
    smoke: Quick smoke tests for basic functionality

# Ignore patterns
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    __pycache__
    .venv
    venv
    env
    chroma_db
    model_cache
    documents

# Console output style
console_output_style = progress

# Timeout for tests (in seconds) - requires pytest-timeout
# timeout = 300

# Parallel execution - requires pytest-xdist
# Comment out if not using xdist
# addopts = -n auto

# Warnings to ignore
filterwarnings =
    # Ignore specific deprecation warnings from dependencies
    ignore::DeprecationWarning:langchain.*
    ignore::DeprecationWarning:chromadb.*
    # Ignore future warnings
    ignore::FutureWarning
    # You can add more specific warning filters as needed

# Log settings
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)s] %(name)s: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage options (when using pytest-cov)
[coverage:run]
source = pda
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */env/*
    */.venv/*

[coverage:report]
# Fail if coverage is below this percentage
# fail_under = 80

# Ignore these in coverage
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract

# Show lines missing coverage
show_missing = True

# Precision for coverage percentages
precision = 2

[coverage:html]
directory = htmlcov